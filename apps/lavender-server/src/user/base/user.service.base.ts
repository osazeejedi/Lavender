/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, User as PrismaUser, Bet as PrismaBet } from "@prisma/client";
import { PasswordService } from "../../auth/password.service";
import { transformStringFieldUpdateInput } from "../../prisma.util";
import { UserProfileOutput } from "../UserProfileOutput";
import { UserStatsOutput } from "../UserStatsOutput";
import { LinkPaymentMethodInput } from "../LinkPaymentMethodInput";
import { UserLoginInput } from "../UserLoginInput";
import { UserRegistrationInput } from "../UserRegistrationInput";
import { SetPreferencesInput } from "../SetPreferencesInput";
import { UpdateProfileInput } from "../UpdateProfileInput";
import { UploadProfilePictureInput } from "../UploadProfilePictureInput";

export class UserServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly passwordService: PasswordService
  ) {}

  async count(args: Omit<Prisma.UserCountArgs, "select">): Promise<number> {
    return this.prisma.user.count(args);
  }

  async users(args: Prisma.UserFindManyArgs): Promise<PrismaUser[]> {
    return this.prisma.user.findMany(args);
  }
  async user(args: Prisma.UserFindUniqueArgs): Promise<PrismaUser | null> {
    return this.prisma.user.findUnique(args);
  }
  async createUser(args: Prisma.UserCreateArgs): Promise<PrismaUser> {
    return this.prisma.user.create({
      ...args,

      data: {
        ...args.data,
        password: await this.passwordService.hash(args.data.password),
      },
    });
  }
  async updateUser(args: Prisma.UserUpdateArgs): Promise<PrismaUser> {
    return this.prisma.user.update({
      ...args,

      data: {
        ...args.data,

        password:
          args.data.password &&
          (await transformStringFieldUpdateInput(
            args.data.password,
            (password) => this.passwordService.hash(password)
          )),
      },
    });
  }
  async deleteUser(args: Prisma.UserDeleteArgs): Promise<PrismaUser> {
    return this.prisma.user.delete(args);
  }

  async findBets(
    parentId: string,
    args: Prisma.BetFindManyArgs
  ): Promise<PrismaBet[]> {
    return this.prisma.user
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .bets(args);
  }
  async GetUserProfile(args: string): Promise<UserProfileOutput> {
    throw new Error("Not implemented");
  }
  async GetUserStats(args: string): Promise<UserStatsOutput> {
    throw new Error("Not implemented");
  }
  async LinkPaymentMethod(
    args: LinkPaymentMethodInput
  ): Promise<LinkPaymentMethodInput> {
    throw new Error("Not implemented");
  }
  async Login(args: UserLoginInput): Promise<string> {
    throw new Error("Not implemented");
  }
  async RegisterUser(
    args: UserRegistrationInput
  ): Promise<UserRegistrationInput> {
    throw new Error("Not implemented");
  }
  async SetPreferences(
    args: SetPreferencesInput
  ): Promise<SetPreferencesInput> {
    throw new Error("Not implemented");
  }
  async UpdateProfile(args: UpdateProfileInput): Promise<UpdateProfileInput> {
    throw new Error("Not implemented");
  }
  async UploadProfilePicture(
    args: UploadProfilePictureInput
  ): Promise<UploadProfilePictureInput> {
    throw new Error("Not implemented");
  }
}
