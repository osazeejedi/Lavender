/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { UserService } from "../user.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { UserCreateInput } from "./UserCreateInput";
import { User } from "./User";
import { UserFindManyArgs } from "./UserFindManyArgs";
import { UserWhereUniqueInput } from "./UserWhereUniqueInput";
import { UserUpdateInput } from "./UserUpdateInput";
import { BetFindManyArgs } from "../../bet/base/BetFindManyArgs";
import { Bet } from "../../bet/base/Bet";
import { BetWhereUniqueInput } from "../../bet/base/BetWhereUniqueInput";
import { SupportRequestFindManyArgs } from "../../supportRequest/base/SupportRequestFindManyArgs";
import { SupportRequest } from "../../supportRequest/base/SupportRequest";
import { SupportRequestWhereUniqueInput } from "../../supportRequest/base/SupportRequestWhereUniqueInput";
import { UserAccountFindManyArgs } from "../../userAccount/base/UserAccountFindManyArgs";
import { UserAccount } from "../../userAccount/base/UserAccount";
import { UserAccountWhereUniqueInput } from "../../userAccount/base/UserAccountWhereUniqueInput";
import { UserAchievementFindManyArgs } from "../../userAchievement/base/UserAchievementFindManyArgs";
import { UserAchievement } from "../../userAchievement/base/UserAchievement";
import { UserAchievementWhereUniqueInput } from "../../userAchievement/base/UserAchievementWhereUniqueInput";
import { UploadProfilePictureInput } from "../UploadProfilePictureInput";
import { UserProfileOutput } from "../UserProfileOutput";
import { UserStatsOutput } from "../UserStatsOutput";
import { LinkPaymentMethodInput } from "../LinkPaymentMethodInput";
import { UserRegistrationInput } from "../UserRegistrationInput";
import { SetPreferencesInput } from "../SetPreferencesInput";
import { UpdateProfileInput } from "../UpdateProfileInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class UserControllerBase {
  constructor(
    protected readonly service: UserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: User })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createUser(@common.Body() data: UserCreateInput): Promise<User> {
    return await this.service.createUser({
      data: data,
      select: {
        bio: true,
        createdAt: true,
        cryptoPaymentAddress: true,
        email: true,
        favoriteGames: true,
        firstName: true,
        id: true,
        lastName: true,
        location: true,
        notifications: true,
        privacySettings: true,
        profilePicture: true,
        roles: true,
        updatedAt: true,
        username: true,
        walletBalance: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [User] })
  @ApiNestedQuery(UserFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async users(@common.Req() request: Request): Promise<User[]> {
    const args = plainToClass(UserFindManyArgs, request.query);
    return this.service.users({
      ...args,
      select: {
        bio: true,
        createdAt: true,
        cryptoPaymentAddress: true,
        email: true,
        favoriteGames: true,
        firstName: true,
        id: true,
        lastName: true,
        location: true,
        notifications: true,
        privacySettings: true,
        profilePicture: true,
        roles: true,
        updatedAt: true,
        username: true,
        walletBalance: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async user(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    const result = await this.service.user({
      where: params,
      select: {
        bio: true,
        createdAt: true,
        cryptoPaymentAddress: true,
        email: true,
        favoriteGames: true,
        firstName: true,
        id: true,
        lastName: true,
        location: true,
        notifications: true,
        privacySettings: true,
        profilePicture: true,
        roles: true,
        updatedAt: true,
        username: true,
        walletBalance: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateUser(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() data: UserUpdateInput
  ): Promise<User | null> {
    try {
      return await this.service.updateUser({
        where: params,
        data: data,
        select: {
          bio: true,
          createdAt: true,
          cryptoPaymentAddress: true,
          email: true,
          favoriteGames: true,
          firstName: true,
          id: true,
          lastName: true,
          location: true,
          notifications: true,
          privacySettings: true,
          profilePicture: true,
          roles: true,
          updatedAt: true,
          username: true,
          walletBalance: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: User })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteUser(
    @common.Param() params: UserWhereUniqueInput
  ): Promise<User | null> {
    try {
      return await this.service.deleteUser({
        where: params,
        select: {
          bio: true,
          createdAt: true,
          cryptoPaymentAddress: true,
          email: true,
          favoriteGames: true,
          firstName: true,
          id: true,
          lastName: true,
          location: true,
          notifications: true,
          privacySettings: true,
          profilePicture: true,
          roles: true,
          updatedAt: true,
          username: true,
          walletBalance: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/bets")
  @ApiNestedQuery(BetFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Bet",
    action: "read",
    possession: "any",
  })
  async findBets(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<Bet[]> {
    const query = plainToClass(BetFindManyArgs, request.query);
    const results = await this.service.findBets(params.id, {
      ...query,
      select: {
        amount: true,

        appUser: {
          select: {
            id: true,
          },
        },

        betAmount: true,
        bettingAppUser: true,
        bettingRoom: true,
        createdAt: true,
        id: true,
        odds: true,

        room: {
          select: {
            id: true,
          },
        },

        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/bets")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectBets(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: BetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bets: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/bets")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateBets(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: BetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bets: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/bets")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectBets(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: BetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bets: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/supportRequests")
  @ApiNestedQuery(SupportRequestFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SupportRequest",
    action: "read",
    possession: "any",
  })
  async findSupportRequests(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<SupportRequest[]> {
    const query = plainToClass(SupportRequestFindManyArgs, request.query);
    const results = await this.service.findSupportRequests(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        message: true,
        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/supportRequests")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectSupportRequests(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: SupportRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      supportRequests: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/supportRequests")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateSupportRequests(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: SupportRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      supportRequests: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/supportRequests")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectSupportRequests(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: SupportRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      supportRequests: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/userAccounts")
  @ApiNestedQuery(UserAccountFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "UserAccount",
    action: "read",
    possession: "any",
  })
  async findUserAccounts(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<UserAccount[]> {
    const query = plainToClass(UserAccountFindManyArgs, request.query);
    const results = await this.service.findUserAccounts(params.id, {
      ...query,
      select: {
        balance: true,
        createdAt: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userAccounts")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectUserAccounts(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userAccounts: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userAccounts")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateUserAccounts(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userAccounts: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userAccounts")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectUserAccounts(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userAccounts: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/userAchievements")
  @ApiNestedQuery(UserAchievementFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "UserAchievement",
    action: "read",
    possession: "any",
  })
  async findUserAchievements(
    @common.Req() request: Request,
    @common.Param() params: UserWhereUniqueInput
  ): Promise<UserAchievement[]> {
    const query = plainToClass(UserAchievementFindManyArgs, request.query);
    const results = await this.service.findUserAchievements(params.id, {
      ...query,
      select: {
        achievement: {
          select: {
            id: true,
          },
        },

        achievementAppUser: true,
        achievementDateEarned: true,

        appUser: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dateAchieved: true,
        dateEarned: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        userAchievement: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userAchievements")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async connectUserAchievements(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserAchievementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userAchievements: {
        connect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userAchievements")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async updateUserAchievements(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserAchievementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userAchievements: {
        set: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userAchievements")
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "update",
    possession: "any",
  })
  async disconnectUserAchievements(
    @common.Param() params: UserWhereUniqueInput,
    @common.Body() body: UserAchievementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userAchievements: {
        disconnect: body,
      },
    };
    await this.service.updateUser({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/users/profile")
  @swagger.ApiOkResponse({
    type: UserProfileOutput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetUserProfile(
    @common.Body()
    body: UploadProfilePictureInput
  ): Promise<UserProfileOutput> {
    return this.service.GetUserProfile(body);
  }

  @common.Get("/users/stats")
  @swagger.ApiOkResponse({
    type: UserStatsOutput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetUserStats(
    @common.Body()
    body: UploadProfilePictureInput
  ): Promise<UserStatsOutput> {
    return this.service.GetUserStats(body);
  }

  @common.Patch("/payment/methods/link")
  @swagger.ApiOkResponse({
    type: LinkPaymentMethodInput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async LinkPaymentMethod(
    @common.Body()
    body: UploadProfilePictureInput
  ): Promise<LinkPaymentMethodInput> {
    return this.service.LinkPaymentMethod(body);
  }

  @common.Post("/login")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async Login(
    @common.Body()
    body: UploadProfilePictureInput
  ): Promise<string> {
    return this.service.Login(body);
  }

  @common.Post("/register")
  @swagger.ApiOkResponse({
    type: UserRegistrationInput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async RegisterUser(
    @common.Body()
    body: UploadProfilePictureInput
  ): Promise<UserRegistrationInput> {
    return this.service.RegisterUser(body);
  }

  @common.Patch("/preferences")
  @swagger.ApiOkResponse({
    type: SetPreferencesInput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async SetPreferences(
    @common.Body()
    body: UploadProfilePictureInput
  ): Promise<SetPreferencesInput> {
    return this.service.SetPreferences(body);
  }

  @common.Patch("/profile/update")
  @swagger.ApiOkResponse({
    type: UpdateProfileInput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async UpdateProfile(
    @common.Body()
    body: UploadProfilePictureInput
  ): Promise<UpdateProfileInput> {
    return this.service.UpdateProfile(body);
  }

  @common.Post("/profile/picture/upload")
  @swagger.ApiOkResponse({
    type: UploadProfilePictureInput,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async UploadProfilePicture(
    @common.Body()
    body: UploadProfilePictureInput
  ): Promise<UploadProfilePictureInput> {
    return this.service.UploadProfilePicture(body);
  }
}
