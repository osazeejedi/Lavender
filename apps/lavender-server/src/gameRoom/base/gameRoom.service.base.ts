/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  GameRoom as PrismaGameRoom,
  Message as PrismaMessage,
} from "@prisma/client";

export class GameRoomServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.GameRoomCountArgs, "select">): Promise<number> {
    return this.prisma.gameRoom.count(args);
  }

  async gameRooms(
    args: Prisma.GameRoomFindManyArgs
  ): Promise<PrismaGameRoom[]> {
    return this.prisma.gameRoom.findMany(args);
  }
  async gameRoom(
    args: Prisma.GameRoomFindUniqueArgs
  ): Promise<PrismaGameRoom | null> {
    return this.prisma.gameRoom.findUnique(args);
  }
  async createGameRoom(
    args: Prisma.GameRoomCreateArgs
  ): Promise<PrismaGameRoom> {
    return this.prisma.gameRoom.create(args);
  }
  async updateGameRoom(
    args: Prisma.GameRoomUpdateArgs
  ): Promise<PrismaGameRoom> {
    return this.prisma.gameRoom.update(args);
  }
  async deleteGameRoom(
    args: Prisma.GameRoomDeleteArgs
  ): Promise<PrismaGameRoom> {
    return this.prisma.gameRoom.delete(args);
  }

  async findMessages(
    parentId: string,
    args: Prisma.MessageFindManyArgs
  ): Promise<PrismaMessage[]> {
    return this.prisma.gameRoom
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .messages(args);
  }
}
