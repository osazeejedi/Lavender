/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Bet as PrismaBet,
  Room as PrismaRoom,
  User as PrismaUser,
} from "@prisma/client";
import { BettingHistoryOutput } from "../BettingHistoryOutput";
import { FinalLeaderboardOutput } from "../FinalLeaderboardOutput";
import { PlaceBetInput } from "../PlaceBetInput";
import { BetSettlementInput } from "../../user/BetSettlementInput";

export class BetServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.BetCountArgs, "select">): Promise<number> {
    return this.prisma.bet.count(args);
  }

  async bets(args: Prisma.BetFindManyArgs): Promise<PrismaBet[]> {
    return this.prisma.bet.findMany(args);
  }
  async bet(args: Prisma.BetFindUniqueArgs): Promise<PrismaBet | null> {
    return this.prisma.bet.findUnique(args);
  }
  async createBet(args: Prisma.BetCreateArgs): Promise<PrismaBet> {
    return this.prisma.bet.create(args);
  }
  async updateBet(args: Prisma.BetUpdateArgs): Promise<PrismaBet> {
    return this.prisma.bet.update(args);
  }
  async deleteBet(args: Prisma.BetDeleteArgs): Promise<PrismaBet> {
    return this.prisma.bet.delete(args);
  }

  async getRoom(parentId: string): Promise<PrismaRoom | null> {
    return this.prisma.bet
      .findUnique({
        where: { id: parentId },
      })
      .room();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.bet
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
  async GetBettingHistory(args: string): Promise<BettingHistoryOutput> {
    throw new Error("Not implemented");
  }
  async GetFinalLeaderboard(args: string): Promise<FinalLeaderboardOutput> {
    throw new Error("Not implemented");
  }
  async PlaceBet(args: PlaceBetInput): Promise<PlaceBetInput> {
    throw new Error("Not implemented");
  }
  async SettleBets(args: BetSettlementInput): Promise<string> {
    throw new Error("Not implemented");
  }
}
