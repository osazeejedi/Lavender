/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SupportRequest } from "./SupportRequest";
import { SupportRequestCountArgs } from "./SupportRequestCountArgs";
import { SupportRequestFindManyArgs } from "./SupportRequestFindManyArgs";
import { SupportRequestFindUniqueArgs } from "./SupportRequestFindUniqueArgs";
import { CreateSupportRequestArgs } from "./CreateSupportRequestArgs";
import { UpdateSupportRequestArgs } from "./UpdateSupportRequestArgs";
import { DeleteSupportRequestArgs } from "./DeleteSupportRequestArgs";
import { User } from "../../user/base/User";
import { SupportRequestService } from "../supportRequest.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SupportRequest)
export class SupportRequestResolverBase {
  constructor(
    protected readonly service: SupportRequestService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SupportRequest",
    action: "read",
    possession: "any",
  })
  async _supportRequestsMeta(
    @graphql.Args() args: SupportRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SupportRequest])
  @nestAccessControl.UseRoles({
    resource: "SupportRequest",
    action: "read",
    possession: "any",
  })
  async supportRequests(
    @graphql.Args() args: SupportRequestFindManyArgs
  ): Promise<SupportRequest[]> {
    return this.service.supportRequests(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SupportRequest, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SupportRequest",
    action: "read",
    possession: "own",
  })
  async supportRequest(
    @graphql.Args() args: SupportRequestFindUniqueArgs
  ): Promise<SupportRequest | null> {
    const result = await this.service.supportRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SupportRequest)
  @nestAccessControl.UseRoles({
    resource: "SupportRequest",
    action: "create",
    possession: "any",
  })
  async createSupportRequest(
    @graphql.Args() args: CreateSupportRequestArgs
  ): Promise<SupportRequest> {
    return await this.service.createSupportRequest({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SupportRequest)
  @nestAccessControl.UseRoles({
    resource: "SupportRequest",
    action: "update",
    possession: "any",
  })
  async updateSupportRequest(
    @graphql.Args() args: UpdateSupportRequestArgs
  ): Promise<SupportRequest | null> {
    try {
      return await this.service.updateSupportRequest({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SupportRequest)
  @nestAccessControl.UseRoles({
    resource: "SupportRequest",
    action: "delete",
    possession: "any",
  })
  async deleteSupportRequest(
    @graphql.Args() args: DeleteSupportRequestArgs
  ): Promise<SupportRequest | null> {
    try {
      return await this.service.deleteSupportRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(
    @graphql.Parent() parent: SupportRequest
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
