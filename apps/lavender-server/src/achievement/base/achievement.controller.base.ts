/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AchievementService } from "../achievement.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AchievementCreateInput } from "./AchievementCreateInput";
import { Achievement } from "./Achievement";
import { AchievementFindManyArgs } from "./AchievementFindManyArgs";
import { AchievementWhereUniqueInput } from "./AchievementWhereUniqueInput";
import { AchievementUpdateInput } from "./AchievementUpdateInput";
import { UserAchievementFindManyArgs } from "../../userAchievement/base/UserAchievementFindManyArgs";
import { UserAchievement } from "../../userAchievement/base/UserAchievement";
import { UserAchievementWhereUniqueInput } from "../../userAchievement/base/UserAchievementWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AchievementControllerBase {
  constructor(
    protected readonly service: AchievementService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Achievement })
  @nestAccessControl.UseRoles({
    resource: "Achievement",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAchievement(
    @common.Body() data: AchievementCreateInput
  ): Promise<Achievement> {
    return await this.service.createAchievement({
      data: data,
      select: {
        badgeUrl: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        points: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Achievement] })
  @ApiNestedQuery(AchievementFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Achievement",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async achievements(@common.Req() request: Request): Promise<Achievement[]> {
    const args = plainToClass(AchievementFindManyArgs, request.query);
    return this.service.achievements({
      ...args,
      select: {
        badgeUrl: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        points: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Achievement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Achievement",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async achievement(
    @common.Param() params: AchievementWhereUniqueInput
  ): Promise<Achievement | null> {
    const result = await this.service.achievement({
      where: params,
      select: {
        badgeUrl: true,
        createdAt: true,
        description: true,
        id: true,
        name: true,
        points: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Achievement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Achievement",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAchievement(
    @common.Param() params: AchievementWhereUniqueInput,
    @common.Body() data: AchievementUpdateInput
  ): Promise<Achievement | null> {
    try {
      return await this.service.updateAchievement({
        where: params,
        data: data,
        select: {
          badgeUrl: true,
          createdAt: true,
          description: true,
          id: true,
          name: true,
          points: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Achievement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Achievement",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAchievement(
    @common.Param() params: AchievementWhereUniqueInput
  ): Promise<Achievement | null> {
    try {
      return await this.service.deleteAchievement({
        where: params,
        select: {
          badgeUrl: true,
          createdAt: true,
          description: true,
          id: true,
          name: true,
          points: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/userAchievements")
  @ApiNestedQuery(UserAchievementFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "UserAchievement",
    action: "read",
    possession: "any",
  })
  async findUserAchievements(
    @common.Req() request: Request,
    @common.Param() params: AchievementWhereUniqueInput
  ): Promise<UserAchievement[]> {
    const query = plainToClass(UserAchievementFindManyArgs, request.query);
    const results = await this.service.findUserAchievements(params.id, {
      ...query,
      select: {
        achievement: {
          select: {
            id: true,
          },
        },

        achievementAppUser: true,
        achievementDateEarned: true,

        appUser: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        dateAchieved: true,
        dateEarned: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        userAchievement: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userAchievements")
  @nestAccessControl.UseRoles({
    resource: "Achievement",
    action: "update",
    possession: "any",
  })
  async connectUserAchievements(
    @common.Param() params: AchievementWhereUniqueInput,
    @common.Body() body: UserAchievementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userAchievements: {
        connect: body,
      },
    };
    await this.service.updateAchievement({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userAchievements")
  @nestAccessControl.UseRoles({
    resource: "Achievement",
    action: "update",
    possession: "any",
  })
  async updateUserAchievements(
    @common.Param() params: AchievementWhereUniqueInput,
    @common.Body() body: UserAchievementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userAchievements: {
        set: body,
      },
    };
    await this.service.updateAchievement({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userAchievements")
  @nestAccessControl.UseRoles({
    resource: "Achievement",
    action: "update",
    possession: "any",
  })
  async disconnectUserAchievements(
    @common.Param() params: AchievementWhereUniqueInput,
    @common.Body() body: UserAchievementWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userAchievements: {
        disconnect: body,
      },
    };
    await this.service.updateAchievement({
      where: params,
      data,
      select: { id: true },
    });
  }
}
