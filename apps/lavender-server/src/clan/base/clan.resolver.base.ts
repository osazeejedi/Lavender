/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Clan } from "./Clan";
import { ClanCountArgs } from "./ClanCountArgs";
import { ClanFindManyArgs } from "./ClanFindManyArgs";
import { ClanFindUniqueArgs } from "./ClanFindUniqueArgs";
import { CreateClanArgs } from "./CreateClanArgs";
import { UpdateClanArgs } from "./UpdateClanArgs";
import { DeleteClanArgs } from "./DeleteClanArgs";
import { ClanService } from "../clan.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Clan)
export class ClanResolverBase {
  constructor(
    protected readonly service: ClanService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Clan",
    action: "read",
    possession: "any",
  })
  async _clansMeta(
    @graphql.Args() args: ClanCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Clan])
  @nestAccessControl.UseRoles({
    resource: "Clan",
    action: "read",
    possession: "any",
  })
  async clans(@graphql.Args() args: ClanFindManyArgs): Promise<Clan[]> {
    return this.service.clans(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Clan, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Clan",
    action: "read",
    possession: "own",
  })
  async clan(@graphql.Args() args: ClanFindUniqueArgs): Promise<Clan | null> {
    const result = await this.service.clan(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Clan)
  @nestAccessControl.UseRoles({
    resource: "Clan",
    action: "create",
    possession: "any",
  })
  async createClan(@graphql.Args() args: CreateClanArgs): Promise<Clan> {
    return await this.service.createClan({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Clan)
  @nestAccessControl.UseRoles({
    resource: "Clan",
    action: "update",
    possession: "any",
  })
  async updateClan(@graphql.Args() args: UpdateClanArgs): Promise<Clan | null> {
    try {
      return await this.service.updateClan({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Clan)
  @nestAccessControl.UseRoles({
    resource: "Clan",
    action: "delete",
    possession: "any",
  })
  async deleteClan(@graphql.Args() args: DeleteClanArgs): Promise<Clan | null> {
    try {
      return await this.service.deleteClan(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
