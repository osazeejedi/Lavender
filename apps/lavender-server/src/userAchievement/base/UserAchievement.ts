/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { Achievement } from "../../achievement/base/Achievement";
import {
  ValidateNested,
  IsOptional,
  IsString,
  MaxLength,
  IsDate,
} from "class-validator";
import { Type } from "class-transformer";
import { AppUser } from "../../appUser/base/AppUser";
import { User } from "../../user/base/User";

@ObjectType()
class UserAchievement {
  @ApiProperty({
    required: false,
    type: () => Achievement,
  })
  @ValidateNested()
  @Type(() => Achievement)
  @IsOptional()
  achievement?: Achievement | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  achievementAppUser!: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  achievementDateEarned!: Date | null;

  @ApiProperty({
    required: false,
    type: () => AppUser,
  })
  @ValidateNested()
  @Type(() => AppUser)
  @IsOptional()
  appUser?: AppUser | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  dateAchieved!: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  dateEarned!: Date | null;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: () => User,
  })
  @ValidateNested()
  @Type(() => User)
  @IsOptional()
  user?: User | null;

  @ApiProperty({
    required: false,
    type: () => UserAchievement,
  })
  @ValidateNested()
  @Type(() => UserAchievement)
  @IsOptional()
  userAchievement?: UserAchievement | null;

  @ApiProperty({
    required: false,
    type: () => [UserAchievement],
  })
  @ValidateNested()
  @Type(() => UserAchievement)
  @IsOptional()
  userAchievements?: Array<UserAchievement>;
}

export { UserAchievement as UserAchievement };
