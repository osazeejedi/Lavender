/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  UserAchievement as PrismaUserAchievement,
  Achievement as PrismaAchievement,
  AppUser as PrismaAppUser,
  User as PrismaUser,
} from "@prisma/client";

export class UserAchievementServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserAchievementCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userAchievement.count(args);
  }

  async userAchievements(
    args: Prisma.UserAchievementFindManyArgs
  ): Promise<PrismaUserAchievement[]> {
    return this.prisma.userAchievement.findMany(args);
  }
  async userAchievement(
    args: Prisma.UserAchievementFindUniqueArgs
  ): Promise<PrismaUserAchievement | null> {
    return this.prisma.userAchievement.findUnique(args);
  }
  async createUserAchievement(
    args: Prisma.UserAchievementCreateArgs
  ): Promise<PrismaUserAchievement> {
    return this.prisma.userAchievement.create(args);
  }
  async updateUserAchievement(
    args: Prisma.UserAchievementUpdateArgs
  ): Promise<PrismaUserAchievement> {
    return this.prisma.userAchievement.update(args);
  }
  async deleteUserAchievement(
    args: Prisma.UserAchievementDeleteArgs
  ): Promise<PrismaUserAchievement> {
    return this.prisma.userAchievement.delete(args);
  }

  async findUserAchievements(
    parentId: string,
    args: Prisma.UserAchievementFindManyArgs
  ): Promise<PrismaUserAchievement[]> {
    return this.prisma.userAchievement
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userAchievements(args);
  }

  async getAchievement(parentId: string): Promise<PrismaAchievement | null> {
    return this.prisma.userAchievement
      .findUnique({
        where: { id: parentId },
      })
      .achievement();
  }

  async getAppUser(parentId: string): Promise<PrismaAppUser | null> {
    return this.prisma.userAchievement
      .findUnique({
        where: { id: parentId },
      })
      .appUser();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.userAchievement
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }

  async getUserAchievement(
    parentId: string
  ): Promise<PrismaUserAchievement | null> {
    return this.prisma.userAchievement
      .findUnique({
        where: { id: parentId },
      })
      .userAchievement();
  }
}
