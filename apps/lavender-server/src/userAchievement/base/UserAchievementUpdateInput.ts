/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { AchievementWhereUniqueInput } from "../../achievement/base/AchievementWhereUniqueInput";
import {
  ValidateNested,
  IsOptional,
  IsString,
  MaxLength,
  IsDate,
} from "class-validator";
import { Type } from "class-transformer";
import { AppUserWhereUniqueInput } from "../../appUser/base/AppUserWhereUniqueInput";
import { UserWhereUniqueInput } from "../../user/base/UserWhereUniqueInput";
import { UserAchievementWhereUniqueInput } from "./UserAchievementWhereUniqueInput";
import { UserAchievementUpdateManyWithoutUserAchievementsInput } from "./UserAchievementUpdateManyWithoutUserAchievementsInput";

@InputType()
class UserAchievementUpdateInput {
  @ApiProperty({
    required: false,
    type: () => AchievementWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => AchievementWhereUniqueInput)
  @IsOptional()
  @Field(() => AchievementWhereUniqueInput, {
    nullable: true,
  })
  achievement?: AchievementWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  achievementAppUser?: string | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  achievementDateEarned?: Date | null;

  @ApiProperty({
    required: false,
    type: () => AppUserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => AppUserWhereUniqueInput)
  @IsOptional()
  @Field(() => AppUserWhereUniqueInput, {
    nullable: true,
  })
  appUser?: AppUserWhereUniqueInput | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  dateAchieved?: Date | null;

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  dateEarned?: Date | null;

  @ApiProperty({
    required: false,
    type: () => UserWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserWhereUniqueInput)
  @IsOptional()
  @Field(() => UserWhereUniqueInput, {
    nullable: true,
  })
  user?: UserWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => UserAchievementWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserAchievementWhereUniqueInput)
  @IsOptional()
  @Field(() => UserAchievementWhereUniqueInput, {
    nullable: true,
  })
  userAchievement?: UserAchievementWhereUniqueInput | null;

  @ApiProperty({
    required: false,
    type: () => UserAchievementUpdateManyWithoutUserAchievementsInput,
  })
  @ValidateNested()
  @Type(() => UserAchievementUpdateManyWithoutUserAchievementsInput)
  @IsOptional()
  @Field(() => UserAchievementUpdateManyWithoutUserAchievementsInput, {
    nullable: true,
  })
  userAchievements?: UserAchievementUpdateManyWithoutUserAchievementsInput;
}

export { UserAchievementUpdateInput as UserAchievementUpdateInput };
