/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  UserAccount as PrismaUserAccount,
  Transaction as PrismaTransaction,
  User as PrismaUser,
} from "@prisma/client";

export class UserAccountServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserAccountCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userAccount.count(args);
  }

  async userAccounts(
    args: Prisma.UserAccountFindManyArgs
  ): Promise<PrismaUserAccount[]> {
    return this.prisma.userAccount.findMany(args);
  }
  async userAccount(
    args: Prisma.UserAccountFindUniqueArgs
  ): Promise<PrismaUserAccount | null> {
    return this.prisma.userAccount.findUnique(args);
  }
  async createUserAccount(
    args: Prisma.UserAccountCreateArgs
  ): Promise<PrismaUserAccount> {
    return this.prisma.userAccount.create(args);
  }
  async updateUserAccount(
    args: Prisma.UserAccountUpdateArgs
  ): Promise<PrismaUserAccount> {
    return this.prisma.userAccount.update(args);
  }
  async deleteUserAccount(
    args: Prisma.UserAccountDeleteArgs
  ): Promise<PrismaUserAccount> {
    return this.prisma.userAccount.delete(args);
  }

  async findTransactions(
    parentId: string,
    args: Prisma.TransactionFindManyArgs
  ): Promise<PrismaTransaction[]> {
    return this.prisma.userAccount
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .transactions(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.userAccount
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
