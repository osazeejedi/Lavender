datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Bet {
  amount         Float?
  appUser        AppUser?       @relation(fields: [appUserId], references: [id])
  appUserId      String?
  betAmount      Float?
  bettingAppUser String?
  bettingRoom    String?
  createdAt      DateTime       @default(now())
  id             String         @id @default(cuid())
  odds           Float?
  room           Room?          @relation(fields: [roomId], references: [id])
  roomId         String?
  status         EnumBetStatus?
  updatedAt      DateTime       @updatedAt
  user           User?          @relation(fields: [userId], references: [id])
  userId         String?
}

model Room {
  bets            Bet[]
  createdAt       DateTime  @default(now())
  description     String?
  id              String    @id @default(cuid())
  messages        Message[]
  name            String?
  owner           String?
  roomDescription String?
  roomName        String?
  roomOwner       String?
  updatedAt       DateTime  @updatedAt
}

model Message {
  content         String?
  createdAt       DateTime  @default(now())
  gameRoom        GameRoom? @relation(fields: [gameRoomId], references: [id])
  gameRoomId      String?
  id              String    @id @default(cuid())
  messageContent  String?
  messageGameRoom String?
  messageSender   String?
  room            Room?     @relation(fields: [roomId], references: [id])
  roomId          String?
  sender          String?
  timestamp       DateTime?
  updatedAt       DateTime  @updatedAt
}

model User {
  bets                 Bet[]
  bio                  String?
  createdAt            DateTime          @default(now())
  cryptoPaymentAddress String?
  email                String?           @unique
  favoriteGames        String?
  firstName            String?
  id                   String            @id @default(cuid())
  lastName             String?
  location             String?
  notifications        Json?
  password             String
  privacySettings      Json?
  profilePicture       Json?
  roles                Json
  supportRequests      SupportRequest[]
  updatedAt            DateTime          @updatedAt
  userAccounts         UserAccount[]
  userAchievements     UserAchievement[]
  username             String            @unique
  walletBalance        Float?
}

model UserAchievement {
  achievement           Achievement?      @relation(fields: [achievementId], references: [id])
  achievementId         String?
  achievementAppUser    String?
  achievementDateEarned DateTime?
  appUser               AppUser?          @relation(fields: [appUserId], references: [id])
  appUserId             String?
  createdAt             DateTime          @default(now())
  dateAchieved          DateTime?
  dateEarned            DateTime?
  id                    String            @id @default(cuid())
  updatedAt             DateTime          @updatedAt
  user                  User?             @relation(fields: [userId], references: [id])
  userId                String?
  userAchievement       UserAchievement?  @relation(name: "UserAchievementOnUserAchievements", fields: [userAchievementId], references: [id])
  userAchievementId     String?
  userAchievements      UserAchievement[] @relation(name: "UserAchievementOnUserAchievements")
}

model Achievement {
  badgeUrl         Json?
  createdAt        DateTime          @default(now())
  description      String?
  id               String            @id @default(cuid())
  name             String?
  points           Int?
  updatedAt        DateTime          @updatedAt
  userAchievements UserAchievement[]
}

model Tournament {
  createdAt             DateTime  @default(now())
  description           String?
  endDate               DateTime?
  id                    String    @id @default(cuid())
  name                  String?
  startDate             DateTime?
  tournamentDescription String?
  tournamentEndDate     DateTime?
  tournamentName        String?
  tournamentStartDate   DateTime?
  updatedAt             DateTime  @updatedAt
}

model Notification {
  appUser   AppUser? @relation(fields: [appUserId], references: [id])
  appUserId String?
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  isRead    Boolean?
  message   String?
  updatedAt DateTime @updatedAt
}

model Clan {
  clanDescription String?
  clanName        String?
  createdAt       DateTime @default(now())
  description     String?
  id              String   @id @default(cuid())
  name            String?
  updatedAt       DateTime @updatedAt
}

model GameRoom {
  betTypes            Json?
  createdAt           DateTime  @default(now())
  description         String?
  gameRoomDescription String?
  gameRoomName        String?
  id                  String    @id @default(cuid())
  matchSelection      String?
  messages            Message[]
  name                String?
  roomType            String?
  updatedAt           DateTime  @updatedAt
}

model AppUser {
  bets             Bet[]
  createdAt        DateTime          @default(now())
  createdDate      DateTime?
  email            String?
  id               String            @id @default(cuid())
  notifications    Notification[]
  password         String?
  updatedAt        DateTime          @updatedAt
  userAchievements UserAchievement[]
  username         String?
}

model UserAccount {
  balance      Float?
  createdAt    DateTime      @default(now())
  id           String        @id @default(cuid())
  transactions Transaction[]
  updatedAt    DateTime      @updatedAt
  user         User?         @relation(fields: [userId], references: [id])
  userId       String?
}

model Transaction {
  account              String?
  amount               Float?
  amountValue          Float?
  createdAt            DateTime                        @default(now())
  date                 DateTime?
  id                   String                          @id @default(cuid())
  transactionDate      DateTime?
  transactionTimestamp DateTime?
  transactionType      EnumTransactionTransactionType?
  txType               EnumTransactionTxType?
  typeField            EnumTransactionTypeField?
  updatedAt            DateTime                        @updatedAt
  userAccount          UserAccount?                    @relation(fields: [userAccountId], references: [id])
  userAccountId        String?
}

model SupportRequest {
  createdAt DateTime                  @default(now())
  id        String                    @id @default(cuid())
  message   String?
  status    EnumSupportRequestStatus?
  updatedAt DateTime                  @updatedAt
  user      User?                     @relation(fields: [userId], references: [id])
  userId    String?
}

enum EnumBetStatus {
  Option1
}

enum EnumTransactionTransactionType {
  Option1
}

enum EnumTransactionTxType {
  Option1
}

enum EnumTransactionTypeField {
  Option1
}

enum EnumSupportRequestStatus {
  Option1
}
